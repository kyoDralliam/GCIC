term_parser: ID ARROW RPAREN
##
## Ends in an error in state: 40.
##
## term -> fact ARROW . term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## fact ARROW
##

After an `$0` (arrow), a term is expected.
For example:
> $1 $0 Type0

term_parser: ID RPAREN
##
## Ends in an error in state: 110.
##
## term_parser -> top . EOF [ # ]
## top -> top . COLON term [ EOF COLON ]
##
## The known suffix of the stack is as follows:
## top
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
## In state 62, spurious reduction of production top -> term
##

I'm currently parsing a term.
After `$0`, the end of file is expected.

term_parser: KWD_FORALL LPAREN ID COLON ID RPAREN COMMA RPAREN
##
## Ends in an error in state: 36.
##
## term -> KWD_FORALL nonempty_list(arg) COMMA . term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_FORALL nonempty_list(arg) COMMA
##

I'm currently parsing a pi type.
After the `,` (comma), the body of the pi type is expected.
For example:
> $2 $1 $0 Type0

term_parser: KWD_FORALL RPAREN
##
## Ends in an error in state: 34.
##
## term -> KWD_FORALL . nonempty_list(arg) COMMA term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_FORALL
##

I'm currently parsing the arguments of a pi type.
After the `$0`, an argument of the form `(id ... id : term)` is expected.
For example:
> $0 (a b : Type0), ...
> $0, ...

term_parser: KWD_LAMBDA LPAREN ID COLON ID KWD_LET
##
## Ends in an error in state: 46.
##
## arg -> LPAREN nonempty_list(id) COLON term . RPAREN [ LPAREN DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN nonempty_list(id) COLON term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
##

I'm currently parsing arguments to a pi type or lambda expression.
After the `$0`, a closing parenthesis is expected `)`.

term_parser: KWD_LAMBDA LPAREN ID COLON ID RPAREN RPAREN
##
## Ends in an error in state: 44.
##
## nonempty_list(arg) -> arg . [ DOT COMMA ]
## nonempty_list(arg) -> arg . nonempty_list(arg) [ DOT COMMA ]
##
## The known suffix of the stack is as follows:
## arg
##

I'm currently parsing the arguments of a lambda expression.
I expect more arguments of the form `(id ... id : type)` or a `.` (dot) followed
by the body of the lambda.
For example:
> $0, ...
> $0 (id1 id2 : Type0), ...

term_parser: KWD_LAMBDA LPAREN ID COLON RPAREN
##
## Ends in an error in state: 33.
##
## arg -> LPAREN nonempty_list(id) COLON . term RPAREN [ LPAREN DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN nonempty_list(id) COLON
##

I'm currently parsing the type of the arguments of a lambda expression.
After the `:` (colon), a term is expected.
For example:
> $2 $1 $0 Type0), ...

term_parser: KWD_LAMBDA LPAREN ID RPAREN
##
## Ends in an error in state: 48.
##
## nonempty_list(id) -> id . [ COLON ]
## nonempty_list(id) -> id . nonempty_list(id) [ COLON ]
##
## The known suffix of the stack is as follows:
## id
##

I'm currently parsing the arguments of a lambda expression.
I expect more identifiers or a colon followed by a type.
For example:
> $0 foo bar : ?0)
> $0 : ?0)

term_parser: KWD_LAMBDA LPAREN RPAREN
##
## Ends in an error in state: 31.
##
## arg -> LPAREN . nonempty_list(id) COLON term RPAREN [ LPAREN DOT COMMA COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

I'm currently parsing the arguments of a lambda expression.
I expect a nonempty list of identifiers.
For example:
> (x : ?0), ...
> (x y z : ?0), ...
> (x : ?0) (y z : Type1), ...

term_parser: KWD_LAMBDA RPAREN
##
## Ends in an error in state: 30.
##
## term -> KWD_LAMBDA . nonempty_list(arg) DOT term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LAMBDA
##

I'm currently parsing the arguments of a lambda expression.
I expect a nonempty list of arguments of the form `(id ... id : type)`.
For example:
> $0 (x : a)
> $0 (x y z : a)

term_parser: KWD_LET ID COLON ID EQUAL ID KWD_IN RPAREN
##
## Ends in an error in state: 56.
##
## term -> KWD_LET id COLON term EQUAL term KWD_IN . term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LET id COLON term EQUAL term KWD_IN
##

I'm currently parsing the in-term of a let expression.
After the `in`, an expression is expected.

term_parser: KWD_LET ID COLON ID EQUAL ID RPAREN
##
## Ends in an error in state: 55.
##
## term -> KWD_LET id COLON term EQUAL term . KWD_IN term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LET id COLON term EQUAL term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
##

I'm currently parsing the bounded term of a let expression.
After the `=`, an expression is expected followed by `in`.
For example:
> $5 $4 $3 ... $1 $0 in ...

term_parser: KWD_LET ID COLON ID EQUAL RPAREN
##
## Ends in an error in state: 54.
##
## term -> KWD_LET id COLON term EQUAL . term KWD_IN term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LET id COLON term EQUAL
##

I'm currently parsing the bounded term of a let expression.
After the `=`, an expression is expected followed by `in`.
For example:
> $4 $3 $2 ... $0 in ...

term_parser: KWD_LET ID COLON ID RPAREN
##
## Ends in an error in state: 53.
##
## term -> KWD_LET id COLON term . EQUAL term KWD_IN term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LET id COLON term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
##

I'm currently parsing the bounded term's type of a let expression.
After the `:`, an expression is expected followed by `=`.
For example:
> $3 $2 $1 $0 = ...
> $3 $2 $1 $0 x = ...

term_parser: KWD_LET ID COLON RPAREN
##
## Ends in an error in state: 29.
##
## term -> KWD_LET id COLON . term EQUAL term KWD_IN term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LET id COLON
##

I'm currently parsing the binder's type of a let expression.
After the `:`, an expression is expected followed by `=`.
For example:
> $2 $1 $0 ?0 = ...
> $2 $1 $0 foo Type0 ?1 = ...

term_parser: KWD_LET ID RPAREN
##
## Ends in an error in state: 28.
##
## term -> KWD_LET id . COLON term EQUAL term KWD_IN term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LET id
##

I'm currently parsing a let expression.
After the identifier, a `:` (colon) is expected followed by a type.
For example:
> $1 $0 : ?0 = ...
> $1 $0 : foo Type0 ?1 = ...

term_parser: KWD_LET RPAREN
##
## Ends in an error in state: 27.
##
## term -> KWD_LET . id COLON term EQUAL term KWD_IN term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LET
##

I'm currently parsing the binder of a let expression.
After the `let`, an identifier is expected followed by `:`.
For example:
> $0 x : ?0 = ...
> $0 f : foo Type0 ?1 = ...

term_parser: KWD_UNIVERSE RPAREN
##
## Ends in an error in state: 25.
##
## atom -> KWD_UNIVERSE . INT [ VERNAC_SEPARATOR VBAR RPAREN LPAREN KWD_UNKNOWN_T KWD_UNKNOWN KWD_UNIVERSE KWD_IN ID EQUAL EOF COLON ARROW ]
##
## The known suffix of the stack is as follows:
## KWD_UNIVERSE
##

I'm currently parsing the level of a universe.
After the `$0`, a non-negative integer is expected.
For example:
> $0 0
> Type1
> â–¡1

term_parser: KWD_UNKNOWN RPAREN
##
## Ends in an error in state: 23.
##
## atom -> KWD_UNKNOWN . INT [ VERNAC_SEPARATOR VBAR RPAREN LPAREN KWD_UNKNOWN_T KWD_UNKNOWN KWD_UNIVERSE KWD_IN ID EQUAL EOF COLON ARROW ]
##
## The known suffix of the stack is as follows:
## KWD_UNKNOWN
##

I'm currently parsing the universe level of an unknown term.
After the `$0`, a non-negative integer is expected.
For example:
> $0 0
> ?1

term_parser: KWD_UNKNOWN_T RPAREN
##
## Ends in an error in state: 21.
##
## atom -> KWD_UNKNOWN_T . INT [ VERNAC_SEPARATOR VBAR RPAREN LPAREN KWD_UNKNOWN_T KWD_UNKNOWN KWD_UNIVERSE KWD_IN ID EQUAL EOF COLON ARROW ]
##
## The known suffix of the stack is as follows:
## KWD_UNKNOWN_T
##

I'm currently parsing the universe level of the unknown type.
After the `$0`, a non-negative integer is expected.
For example:
> $0 0
> !1

term_parser: LPAREN RPAREN
##
## Ends in an error in state: 20.
##
## atom -> LPAREN . top RPAREN [ VERNAC_SEPARATOR VBAR RPAREN LPAREN KWD_UNKNOWN_T KWD_UNKNOWN KWD_UNIVERSE KWD_IN ID EQUAL EOF COLON ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

I'm currently parsing a parenthesised term.
After the `(` a term is expected followed by a closing parenthesis `)`.
For example:
> (f x y)
> (foo ?0 y)
> (fun (x : Type0). x)

term_parser: RPAREN
##
## Ends in an error in state: 109.
##
## term_parser' -> . term_parser [ # ]
##
## The known suffix of the stack is as follows:
##
##

I'm currently parsing a term.
At the top level, a term is expected.
For example:
> let f : ?0 = Type0 in f
> fun (x : Type0). x

program_parser: RPAREN
##
## Ends in an error in state: 103.
##
## program_parser' -> . program_parser [ # ]
##
## The known suffix of the stack is as follows:
##
##

I'm currently parsing a program.
At the top level, a command is expected.
For example:
> eval let f : ?0 = Type0 in f;;
> check (fun (x : Type0). x) As ?0 -> ?0;;


program_parser: VERNAC_EVAL VERNAC_SEPARATOR
##
## Ends in an error in state: 79.
##
## command -> VERNAC_EVAL . top [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_EVAL
##

A term is expected after the `$0` command.
For example:
> $0 let f : ?0 = Type0 in f;;

term_parser: KWD_FORALL LPAREN ID COLON ID RPAREN DOT
##
## Ends in an error in state: 35.
##
## term -> KWD_FORALL nonempty_list(arg) . COMMA term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_FORALL nonempty_list(arg)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production nonempty_list(arg) -> arg
##

I'm currently parsing the arguments of a pi type.
I expect more arguments of the form (x y z : t) or a `,` (comma) followed
by the body of the pi type.
For example:
> $1 $0 (a b : Type0), ...
> $1 $0, ...

term_parser: KWD_LAMBDA LPAREN ID COLON ID RPAREN COMMA
##
## Ends in an error in state: 50.
##
## term -> KWD_LAMBDA nonempty_list(arg) . DOT term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LAMBDA nonempty_list(arg)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 44, spurious reduction of production nonempty_list(arg) -> arg
##

I'm currently parsing the arguments of a lambda expression.
I expect more arguments of the form (x y z : t) or a `.` (dot) followed
by the body of the lambda.
For example:
> $1 $0. ...
> $1 $0 (id1 id2 : Type0). ...

term_parser: KWD_LAMBDA LPAREN ID COLON ID RPAREN DOT VERNAC_SEPARATOR
##
## Ends in an error in state: 51.
##
## term -> KWD_LAMBDA nonempty_list(arg) DOT . term [ VERNAC_SEPARATOR VBAR RPAREN KWD_IN EQUAL EOF COLON ]
##
## The known suffix of the stack is as follows:
## KWD_LAMBDA nonempty_list(arg) DOT
##

I'm currently parsing a lambda expression.
After the `.` (dot), the body of the lambda is expected.
For example:
> $2 $1 $0 Type0

program_parser: VERNAC_ELABORATE VERNAC_SEPARATOR
##
## Ends in an error in state: 81.
##
## command -> VERNAC_ELABORATE . top [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_ELABORATE
##

A term is expected after the `$0` command.
For example:
> $0 let f : ?0 = Type0 in f;;

program_parser: VERNAC_CHECK VERNAC_SEPARATOR
##
## Ends in an error in state: 92.
##
## command -> VERNAC_CHECK . top [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_CHECK
##

A term is expected after the `$0` command.
For example:
> $0 Type0 : Type1;;

program_parser: VERNAC_ELABORATE ID VERNAC_SEPARATOR VERNAC_SEPARATOR
##
## Ends in an error in state: 104.
##
## list(sequenced_command) -> sequenced_command . list(sequenced_command) [ EOF ]
##
## The known suffix of the stack is as follows:
## sequenced_command
##

After `$0`, another command or the EOF are expected.

program_parser: VERNAC_SET VERNAC_VARIANT_S
##
## Ends in an error in state: 1.
##
## command -> VERNAC_SET . flag [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_SET
##

The command `$0` should be followed by a configuration option.
For example:
> $0 variant G;;
> $0 fuel 0;;


term_parser: LPAREN ID VERNAC_SEPARATOR
##
## Ends in an error in state: 58.
##
## atom -> LPAREN top . RPAREN [ VERNAC_SEPARATOR VBAR RPAREN LPAREN KWD_UNKNOWN_T KWD_UNKNOWN KWD_UNIVERSE KWD_IN ID EQUAL EOF COLON ARROW ]
## top -> top . COLON term [ RPAREN COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN top
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
## In state 62, spurious reduction of production top -> term
##

Missing `)` after $0, to close the parenthesised term.

term_parser: ID COLON VERNAC_VARIANT_S
##
## Ends in an error in state: 60.
##
## top -> top COLON . term [ VERNAC_SEPARATOR RPAREN EOF COLON ]
##
## The known suffix of the stack is as follows:
## top COLON
##

I'm currently parsing an ascription.
After the `:` (colon), a term is expected.
For example:
> $1 $0 <SOME TYPE>

program_parser: VERNAC_CHECK ID RPAREN
##
## Ends in an error in state: 93.
##
## command -> VERNAC_CHECK top . [ VERNAC_SEPARATOR ]
## top -> top . COLON term [ VERNAC_SEPARATOR COLON ]
##
## The known suffix of the stack is as follows:
## VERNAC_CHECK top
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
## In state 62, spurious reduction of production top -> term
##

Missing a `;;` after $0, to close the command. 
For example:
> $1 $0;;

program_parser: VERNAC_ELABORATE ID VERNAC_VARIANT_S
##
## Ends in an error in state: 82.
##
## command -> VERNAC_ELABORATE top . [ VERNAC_SEPARATOR ]
## top -> top . COLON term [ VERNAC_SEPARATOR COLON ]
##
## The known suffix of the stack is as follows:
## VERNAC_ELABORATE top
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
## In state 62, spurious reduction of production top -> term
##

Missing a `;;` after $0, to close the command. 
For example:
> $1 $0;;

program_parser: VERNAC_EVAL ID VERNAC_VARIANT_S
##
## Ends in an error in state: 80.
##
## command -> VERNAC_EVAL top . [ VERNAC_SEPARATOR ]
## top -> top . COLON term [ VERNAC_SEPARATOR COLON ]
##
## The known suffix of the stack is as follows:
## VERNAC_EVAL top
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
## In state 62, spurious reduction of production top -> term
##

Missing a `;;` after $0, to close the command. 
For example:
> $1 $0;;


program_parser: VERNAC_DEFINITION VERNAC_VARIANT_S
##
## Ends in an error in state: 83.
##
## command -> VERNAC_DEFINITION . id list(arg) COLON term EQUAL top [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_DEFINITION
##

An identifier must come after `$0`.
For example:
> $0 my_function_name (x : Type0) : Type1 = x;;

program_parser: VERNAC_DEFINITION ID VERNAC_VARIANT_S
##
## Ends in an error in state: 84.
##
## command -> VERNAC_DEFINITION id . list(arg) COLON term EQUAL top [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_DEFINITION id
##

I expect arguments of the form `(id ... id : type)` or a `:` (colon) followed
by the type of the definition.
For example:
> $1 $0 (a b : Type0) : Type1 = ...;;
> $1 $0 : Type1 = ...;;

program_parser: VERNAC_DEFINITION ID LPAREN ID COLON ID RPAREN DOT
##
## Ends in an error in state: 90.
##
## list(arg) -> arg . list(arg) [ COLON ]
##
## The known suffix of the stack is as follows:
## arg
##

I expect more arguments of the form `(id ... id : type)` or a `:` (colon) followed
by the type of the definition.
For example:
> $2 $1 $0 : Type1 = ...;;


program_parser: VERNAC_DEFINITION ID COLON VERNAC_VARIANT_S
##
## Ends in an error in state: 86.
##
## command -> VERNAC_DEFINITION id list(arg) COLON . term EQUAL top [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_DEFINITION id list(arg) COLON
##

The type of the definition must follow the `:` (colon).
For example:
> $3 $2 $1 $0 Type1 = ...;;

program_parser: VERNAC_DEFINITION ID COLON ID VERNAC_VARIANT_S
##
## Ends in an error in state: 87.
##
## command -> VERNAC_DEFINITION id list(arg) COLON term . EQUAL top [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_DEFINITION id list(arg) COLON term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
##

I expect an `=` (equal) followed by the body of the definition.
For example:
> $4 $3 $2 $1 $0 = ...;;

program_parser: VERNAC_DEFINITION ID COLON ID EQUAL VERNAC_VARIANT_S
##
## Ends in an error in state: 88.
##
## command -> VERNAC_DEFINITION id list(arg) COLON term EQUAL . top [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_DEFINITION id list(arg) COLON term EQUAL
##

The body of the definition must follow the `=` (equal).
For example:
> $5 $4 $3 $2 $1 $0 ...;;

program_parser: VERNAC_DEFINITION ID COLON ID EQUAL ID VERNAC_VARIANT_S
##
## Ends in an error in state: 89.
##
## command -> VERNAC_DEFINITION id list(arg) COLON term EQUAL top . [ VERNAC_SEPARATOR ]
## top -> top . COLON term [ VERNAC_SEPARATOR COLON ]
##
## The known suffix of the stack is as follows:
## VERNAC_DEFINITION id list(arg) COLON term EQUAL top
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
## In state 62, spurious reduction of production top -> term
##

Missing a `;;` after $0, to close the command. 
For example:
> $0;;



program_parser: VERNAC_LOAD VERNAC_VARIANT_S
##
## Ends in an error in state: 10.
##
## command -> VERNAC_LOAD . DOUBLE_QUOTE ID DOUBLE_QUOTE [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_LOAD
##
program_parser: VERNAC_LOAD DOUBLE_QUOTE VERNAC_VARIANT_S
##
## Ends in an error in state: 11.
##
## command -> VERNAC_LOAD DOUBLE_QUOTE . ID DOUBLE_QUOTE [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_LOAD DOUBLE_QUOTE
##
program_parser: VERNAC_LOAD DOUBLE_QUOTE ID VERNAC_VARIANT_S
##
## Ends in an error in state: 12.
##
## command -> VERNAC_LOAD DOUBLE_QUOTE ID . DOUBLE_QUOTE [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_LOAD DOUBLE_QUOTE ID
##

I expect a filename wrapped in double-quotes after `load`.
For example:
> load "my_file";;

command_parser: VERNAC_VARIANT_S
##
## Ends in an error in state: 0.
##
## command_parser' -> . command_parser [ # ]
##
## The known suffix of the stack is as follows:
##
##

I'm currently parsing a program.
At the top level, a command is expected.
For example:
> eval let f : ?0 = Type0 in f;;
> check (fun (x : Type0). x) As ?0 -> ?0;;

command_parser: VERNAC_CHECK ID VERNAC_SEPARATOR VERNAC_VARIANT_S
##
## Ends in an error in state: 94.
##
## command_parser -> sequenced_command . EOF [ # ]
##
## The known suffix of the stack is as follows:
## sequenced_command
##

I'm currently parsing a single command.
After `$0`, the end of file is expected.

flag_parser: VERNAC_FLAG_VARIANT VERNAC_SET
##
## Ends in an error in state: 2.
##
## flag -> VERNAC_FLAG_VARIANT . variant [ VERNAC_SEPARATOR EOF ]
##
## The known suffix of the stack is as follows:
## VERNAC_FLAG_VARIANT
##

A variant (G, N or S) must follow the keyword `$0`.
For example:
> $0 G
> $0 N
> $0 S

flag_parser: VERNAC_FLAG_FUEL VERNAC_VARIANT_S
##
## Ends in an error in state: 7.
##
## flag -> VERNAC_FLAG_FUEL . INT [ VERNAC_SEPARATOR EOF ]
##
## The known suffix of the stack is as follows:
## VERNAC_FLAG_FUEL
##

A non-negative integer must follow the keyword `$0`.
Use `0` to allow programs to diverge.
For example:
> $0 0
> $0 10000

command_parser: VERNAC_SET VERNAC_FLAG_FUEL INT VERNAC_VARIANT_S
##
## Ends in an error in state: 97.
##
## sequenced_command -> command . VERNAC_SEPARATOR [ VERNAC_SET VERNAC_LOAD VERNAC_INDUCTIVE VERNAC_EVAL VERNAC_ELABORATE VERNAC_DEFINITION VERNAC_CHECK EOF ]
##
## The known suffix of the stack is as follows:
## command
##

Missing a `;;` after $0, to close the command. 
For example:
> $0;;

flag_parser: VERNAC_VARIANT_S
##
## Ends in an error in state: 99.
##
## flag_parser' -> . flag_parser [ # ]
##
## The known suffix of the stack is as follows:
##
##

A flag is expected.
For example:
> fuel 1000
> variant G

flag_parser: VERNAC_FLAG_FUEL INT VERNAC_VARIANT_S
##
## Ends in an error in state: 101.
##
## flag_parser -> flag . EOF [ # ]
##
## The known suffix of the stack is as follows:
## flag
##

I'm currently parsing a single flag.
After `$0`, the end of file is expected.

command_parser: VERNAC_INDUCTIVE VERNAC_VARIANT_S
##
## Ends in an error in state: 14.
##
## command -> VERNAC_INDUCTIVE . id list(arg0) COLON term EQUAL list(ctor_decls) [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_INDUCTIVE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID VERNAC_VARIANT_S
##
## Ends in an error in state: 16.
##
## command -> VERNAC_INDUCTIVE id . list(arg0) COLON term EQUAL list(ctor_decls) [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_INDUCTIVE id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID LPAREN VERNAC_VARIANT_S
##
## Ends in an error in state: 17.
##
## arg0 -> LPAREN . nonempty_list(id) COLON term RPAREN [ LPAREN COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID LPAREN ID COLON VERNAC_VARIANT_S
##
## Ends in an error in state: 19.
##
## arg0 -> LPAREN nonempty_list(id) COLON . term RPAREN [ LPAREN COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN nonempty_list(id) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID LPAREN ID COLON ID VERNAC_VARIANT_S
##
## Ends in an error in state: 63.
##
## arg0 -> LPAREN nonempty_list(id) COLON term . RPAREN [ LPAREN COLON ]
##
## The known suffix of the stack is as follows:
## LPAREN nonempty_list(id) COLON term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID COLON VERNAC_VARIANT_S
##
## Ends in an error in state: 66.
##
## command -> VERNAC_INDUCTIVE id list(arg0) COLON . term EQUAL list(ctor_decls) [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_INDUCTIVE id list(arg0) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID COLON ID VERNAC_VARIANT_S
##
## Ends in an error in state: 67.
##
## command -> VERNAC_INDUCTIVE id list(arg0) COLON term . EQUAL list(ctor_decls) [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_INDUCTIVE id list(arg0) COLON term
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID COLON ID EQUAL VERNAC_VARIANT_S
##
## Ends in an error in state: 68.
##
## command -> VERNAC_INDUCTIVE id list(arg0) COLON term EQUAL . list(ctor_decls) [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## VERNAC_INDUCTIVE id list(arg0) COLON term EQUAL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID COLON ID EQUAL VBAR VERNAC_VARIANT_S
##
## Ends in an error in state: 69.
##
## ctor_decls -> VBAR . id list(arg0) COLON term [ VERNAC_SEPARATOR VBAR ]
##
## The known suffix of the stack is as follows:
## VBAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID COLON ID EQUAL VBAR ID VERNAC_VARIANT_S
##
## Ends in an error in state: 70.
##
## ctor_decls -> VBAR id . list(arg0) COLON term [ VERNAC_SEPARATOR VBAR ]
##
## The known suffix of the stack is as follows:
## VBAR id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID COLON ID EQUAL VBAR ID COLON VERNAC_VARIANT_S
##
## Ends in an error in state: 72.
##
## ctor_decls -> VBAR id list(arg0) COLON . term [ VERNAC_SEPARATOR VBAR ]
##
## The known suffix of the stack is as follows:
## VBAR id list(arg0) COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID LPAREN ID COLON ID RPAREN VERNAC_VARIANT_S
##
## Ends in an error in state: 74.
##
## list(arg0) -> arg0 . list(arg0) [ COLON ]
##
## The known suffix of the stack is as follows:
## arg0
##

<YOUR SYNTAX ERROR MESSAGE HERE>

command_parser: VERNAC_INDUCTIVE ID COLON ID EQUAL VBAR ID COLON ID VERNAC_VARIANT_S
##
## Ends in an error in state: 77.
##
## list(ctor_decls) -> ctor_decls . list(ctor_decls) [ VERNAC_SEPARATOR ]
##
## The known suffix of the stack is as follows:
## ctor_decls
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 39, spurious reduction of production term -> fact
## In state 73, spurious reduction of production ctor_decls -> VBAR id list(arg0) COLON term
##

<YOUR SYNTAX ERROR MESSAGE HERE>
